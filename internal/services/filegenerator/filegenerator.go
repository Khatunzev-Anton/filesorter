package filegenerator

import (
	"errors"
	"fmt"
	"os"
	"sync"

	"github.com/Khatunzev-Anton/filesorter/internal/models"
)

type RecordGenerator interface {
	GenerateRecord() (models.SerializableRecord, error)
}

type FileGenerator interface {
	GenerateFile(fname string, cnt int) error
}

type filegenerator struct {
	g RecordGenerator
}

func NewFileGenerator(g RecordGenerator) (FileGenerator, error) {
	return &filegenerator{g: g}, nil
}

func (r *filegenerator) GenerateFile(fname string, cnt int) error {
	if _, err := os.Stat(fname); !errors.Is(err, os.ErrNotExist) {
		return fmt.Errorf("output file already exists")
	}

	file, err := os.Create(fname)
	if err != nil {
		return fmt.Errorf("failed to create output file: %w", err)
	}
	defer file.Close()

	halt := make(chan struct{})
	errs := make(chan error, 1)
	defer close(halt)

	generatedrecordsch := r.generaterecords(halt, errs, cnt)
	savecompleted := r.saverecords(file, generatedrecordsch, halt, errs)

	select {
	case err = <-errs:
		return err
	case <-savecompleted:
	}

	return nil
}

func (r *filegenerator) generaterecords(halt <-chan struct{}, errs chan error, cnt int) <-chan models.SerializableRecord {
	result := make(chan models.SerializableRecord, 5)
	wg := &sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := 0; i < cnt; i++ {
			select {
			case <-halt:
				return
			default:
			}
			record, err := r.g.GenerateRecord()
			if err != nil {
				select {
				case errs <- err:
				default:
				}
				return
			}
			select {
			case result <- record:
			case <-halt:
				return
			}
		}
	}()
	go func(wg *sync.WaitGroup) {
		wg.Wait()
		close(result)
	}(wg)
	return result
}

func (r *filegenerator) saverecords(file *os.File, generatedrecords <-chan models.SerializableRecord, halt <-chan struct{}, errs chan error) <-chan struct{} {
	result := make(chan struct{})

	wg := &sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			var record models.SerializableRecord
			var ok bool
			select {
			case <-halt:
				return
			case record, ok = <-generatedrecords:
				if !ok {
					return
				}
			}
			b, err := record.Bytes()
			if err != nil {
				select {
				case errs <- fmt.Errorf("failed to serialize record: %w", err):
				default:
				}
				return
			}
			_, err = file.Write(b)
			if err != nil {
				select {
				case errs <- fmt.Errorf("failed to write generated bytes into output file: %w", err):
				default:
				}
				return
			}
		}
	}()
	go func(wg *sync.WaitGroup) {
		wg.Wait()
		close(result)
	}(wg)

	return result
}
