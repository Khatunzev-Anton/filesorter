// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	models "github.com/Khatunzev-Anton/filesorter/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// RecordGenerator is an autogenerated mock type for the RecordGenerator type
type RecordGenerator struct {
	mock.Mock
}

type RecordGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *RecordGenerator) EXPECT() *RecordGenerator_Expecter {
	return &RecordGenerator_Expecter{mock: &_m.Mock}
}

// GenerateRecord provides a mock function with given fields:
func (_m *RecordGenerator) GenerateRecord() (models.SerializableRecord, error) {
	ret := _m.Called()

	var r0 models.SerializableRecord
	var r1 error
	if rf, ok := ret.Get(0).(func() (models.SerializableRecord, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.SerializableRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.SerializableRecord)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordGenerator_GenerateRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRecord'
type RecordGenerator_GenerateRecord_Call struct {
	*mock.Call
}

// GenerateRecord is a helper method to define mock.On call
func (_e *RecordGenerator_Expecter) GenerateRecord() *RecordGenerator_GenerateRecord_Call {
	return &RecordGenerator_GenerateRecord_Call{Call: _e.mock.On("GenerateRecord")}
}

func (_c *RecordGenerator_GenerateRecord_Call) Run(run func()) *RecordGenerator_GenerateRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RecordGenerator_GenerateRecord_Call) Return(_a0 models.SerializableRecord, _a1 error) *RecordGenerator_GenerateRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecordGenerator_GenerateRecord_Call) RunAndReturn(run func() (models.SerializableRecord, error)) *RecordGenerator_GenerateRecord_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRecordGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewRecordGenerator creates a new instance of RecordGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecordGenerator(t mockConstructorTestingTNewRecordGenerator) *RecordGenerator {
	mock := &RecordGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
