// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// NamesRepository is an autogenerated mock type for the NamesRepository type
type NamesRepository struct {
	mock.Mock
}

type NamesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NamesRepository) EXPECT() *NamesRepository_Expecter {
	return &NamesRepository_Expecter{mock: &_m.Mock}
}

// Names provides a mock function with given fields: page, pagesize
func (_m *NamesRepository) Names(page int, pagesize int) ([]string, error) {
	ret := _m.Called(page, pagesize)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]string, error)); ok {
		return rf(page, pagesize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []string); ok {
		r0 = rf(page, pagesize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pagesize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamesRepository_Names_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Names'
type NamesRepository_Names_Call struct {
	*mock.Call
}

// Names is a helper method to define mock.On call
//   - page int
//   - pagesize int
func (_e *NamesRepository_Expecter) Names(page interface{}, pagesize interface{}) *NamesRepository_Names_Call {
	return &NamesRepository_Names_Call{Call: _e.mock.On("Names", page, pagesize)}
}

func (_c *NamesRepository_Names_Call) Run(run func(page int, pagesize int)) *NamesRepository_Names_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *NamesRepository_Names_Call) Return(_a0 []string, _a1 error) *NamesRepository_Names_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamesRepository_Names_Call) RunAndReturn(run func(int, int) ([]string, error)) *NamesRepository_Names_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewNamesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewNamesRepository creates a new instance of NamesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNamesRepository(t mockConstructorTestingTNewNamesRepository) *NamesRepository {
	mock := &NamesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
