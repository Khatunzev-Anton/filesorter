package cmd

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"sync"

	"github.com/Khatunzev-Anton/filesorter/internal/mainconfig"
	"github.com/Khatunzev-Anton/filesorter/internal/models"
	"github.com/Khatunzev-Anton/filesorter/internal/repositories"
	"github.com/Khatunzev-Anton/filesorter/internal/services/recordgenerator"
	"github.com/spf13/cobra"
)

var generateoutput string
var generatecount uint32

func init() {
	generateCmd.Flags().StringVarP(&generateoutput, "output", "o", "", "Output file name")
	generateCmd.MarkFlagRequired("output")
	generateCmd.Flags().Uint32Var(&generatecount, "count", 10000, "Count of records to generate")
	generateCmd.MarkFlagRequired("count")

	rootCmd.AddCommand(generateCmd)
}

var generateCmd = &cobra.Command{
	Use:   "generate",
	Short: "Generate test file",
	Long:  `This command generates binary name-value file`,
	RunE: func(cmd *cobra.Command, args []string) error {
		fmt.Println("config", cfgFile)
		var err error
		config, err := mainconfig.NewMainConfig(cfgFile)
		if err != nil {
			return err
		}
		ex, err := os.Executable()
		if err != nil {
			return fmt.Errorf("failed to get current executable directory: %w", err)
		}
		namesrepo, err := repositories.NewNameRepository(fmt.Sprintf("%[1]s/internal/data/names.txt", filepath.Dir(ex))) //???
		if err != nil {
			return fmt.Errorf("failed to initialize namesrepo: %w", err)
		}

		g, err := recordgenerator.NewNameSalaryGenerator(config.GetRecordDescriptor(), namesrepo, 100000, 250000)
		if err != nil {
			return fmt.Errorf("failed to initialize generator: %w", err)
		}

		if _, err := os.Stat(generateoutput); !errors.Is(err, os.ErrNotExist) {
			return fmt.Errorf("output file already exists")
		}

		file, err := os.Create(generateoutput)
		if err != nil {
			return fmt.Errorf("failed to create output file: %w", err)
		}
		defer file.Close()

		halt := make(chan struct{})
		errs := make(chan error, 1)
		defer close(halt)

		generatedrecordsch := generaterecords(g, halt, errs, int(generatecount))
		savecompleted := saverecords(file, generatedrecordsch, halt, errs)

		select {
		case err = <-errs:
			return err
		case <-savecompleted:
		}

		fmt.Println("FILE GENERATED:", generateoutput)
		return nil
	},
}

func generaterecords(g recordgenerator.RecordGenerator, halt <-chan struct{}, errs chan error, cnt int) <-chan models.SerializableRecord {
	result := make(chan models.SerializableRecord, 5)
	wg := &sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := 0; i < cnt; i++ {
			select {
			case <-halt:
				return
			default:
			}
			record, err := g.GenerateRecord()
			if err != nil {
				select {
				case errs <- err:
				default:
				}
				return
			}
			select {
			case result <- record:
			case <-halt:
				return
			}
		}
	}()
	go func(wg *sync.WaitGroup) {
		wg.Wait()
		close(result)
	}(wg)
	return result
}

func saverecords(file *os.File, generatedrecords <-chan models.SerializableRecord, halt <-chan struct{}, errs chan error) <-chan struct{} {
	result := make(chan struct{})

	wg := &sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			var record models.SerializableRecord
			var ok bool
			select {
			case <-halt:
				return
			case record, ok = <-generatedrecords:
				if !ok {
					return
				}
			}
			b, err := record.Bytes()
			if err != nil {
				select {
				case errs <- fmt.Errorf("failed to serialize record: %w", err):
				default:
				}
				return
			}
			_, err = file.Write(b)
			if err != nil {
				select {
				case errs <- fmt.Errorf("failed to write generated bytes into output file: %w", err):
				default:
				}
				return
			}
		}
	}()
	go func(wg *sync.WaitGroup) {
		wg.Wait()
		close(result)
	}(wg)

	return result
}
